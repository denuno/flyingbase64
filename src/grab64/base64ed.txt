Y29tcG9uZW50IG91dHB1dD0iZmFsc2UiIHsNCg0KCS8qIEFwcGxpY2F0aW9uIG5hbWUsIHNob3Vs
ZCBiZSB1bmlxdWUgKi8NCgl0aGlzLm5hbWUgPSAiQXBwbGljYXRpb25OYW1lIjsNCgkvKiBIb3cg
bG9uZyBhcHBsaWNhdGlvbiB2YXJzIHBlcnNpc3QgKi8NCgl0aGlzLmFwcGxpY2F0aW9uVGltZW91
dCA9IGNyZWF0ZVRpbWVTcGFuKDAsMiwwLDApOw0KCS8qIFNob3VsZCBjbGllbnQgdmFycyBiZSBl
bmFibGVkPyAqLw0KCXRoaXMuY2xpZW50TWFuYWdlbWVudCA9IGZhbHNlOw0KCS8qIFdoZXJlIHNo
b3VsZCB3ZSBzdG9yZSB0aGVtLCBpZiBlbmFibGU/ICovDQoJdGhpcy5jbGllbnRTdG9yYWdlID0g
InJlZ2lzdHJ5IjsNCgkvKiBXaGVyZSBzaG91bGQgY2Zsb2dpbiBzdHVmZiBwZXJzaXN0ICovDQoJ
dGhpcy5sb2dpblN0b3JhZ2UgPSAic2Vzc2lvbiI7DQoJLyogU2hvdWxkIHdlIGV2ZW4gdXNlIHNl
c3Npb25zPyAqLw0KCXRoaXMuc2Vzc2lvbk1hbmFnZW1lbnQgPSB0cnVlOw0KCS8qIEhvdyBsb25n
IGRvIHNlc3Npb24gdmFycyBwZXJzaXN0PyAqLw0KCXRoaXMuc2Vzc2lvblRpbWVvdXQgPSBjcmVh
dGVUaW1lU3BhbigwLDAsMjAsMCk7DQoJLyogU2hvdWxkIHdlIHNldCBjb29raWVzIG9uIHRoZSBi
cm93c2VyPyAqLw0KCXRoaXMuc2V0Q2xpZW50Q29va2llcyA9IHRydWU7DQoJLyogc2hvdWxkIGNv
b2tpZXMgYmUgZG9tYWluIHNwZWNpZmljLCBpZSwgKi5mb28uY29tIG9yIHd3dy5mb28uY29tICov
DQoJdGhpcy5zZXREb21haW5Db29raWVzID0gZmFsc2U7DQoJLyogc2hvdWxkIHdlIHRyeSB0byBi
bG9jayAnYmFkJyBpbnB1dCBmcm9tIHVzZXJzICovDQoJdGhpcy5zY3JpcHRQcm90ZWN0ID0gIm5v
bmUiOw0KCS8qIHNob3VsZCB3ZSBzZWN1cmUgb3VyIEpTT04gY2FsbHM/ICovDQoJdGhpcy5zZWN1
cmVKU09OID0gZmFsc2U7DQoJLyogU2hvdWxkIHdlIHVzZSBhIHByZWZpeCBpbiBmcm9udCBvZiBK
U09OIHN0cmluZ3M/ICovDQoJdGhpcy5zZWN1cmVKU09OUHJlZml4ID0gIiI7DQoJLyogVXNlZCB0
byBoZWxwIENGIHdvcmsgd2l0aCBtaXNzaW5nIGZpbGVzIGFuZCBkaXIgaW5kZXhlcyAqLw0KCXRo
aXMud2VsY29tZUZpbGVMaXN0ID0gIiI7DQoNCgkvKiBkZWZpbmUgY3VzdG9tIGNvbGRmdXNpb24g
bWFwcGluZ3MuIEtleXMgYXJlIG1hcHBpbmcgbmFtZXMsIHZhbHVlcyBhcmUgZnVsbCBwYXRocyAg
Ki8NCgl0aGlzLm1hcHBpbmdzID0gc3RydWN0TmV3KCk7DQoJLyogZGVmaW5lIGEgbGlzdCBvZiBj
dXN0b20gdGFnIHBhdGhzLiAqLw0KCXRoaXMuY3VzdG9tdGFncGF0aHMgPSAiIjsNCg0KCS8qIFJ1
biB3aGVuIGFwcGxpY2F0aW9uIHN0YXJ0cyB1cCAqLw0KCWJvb2xlYW4gZnVuY3Rpb24gb25BcHBs
aWNhdGlvblN0YXJ0KCkgIHsNCgkJcmV0dXJuIHRydWU7DQoJfQ0KDQoJLyogUnVuIHdoZW4gYXBw
bGljYXRpb24gc3RvcHMgKi8NCgl2b2lkIGZ1bmN0aW9uIG9uQXBwbGljYXRpb25FbmQocmVxdWly
ZWQgYXBwbGljYXRpb25TY29wZSkgIHsNCgl9DQoNCgkvKiBGaXJlZCB3aGVuIHVzZXIgcmVxdWVz
dHMgYSBDRk0gdGhhdCBkb2Vzbid0IGV4aXN0LiAqLw0KCWJvb2xlYW4gZnVuY3Rpb24gb25NaXNz
aW5nVGVtcGxhdGUocmVxdWlyZWQgc3RyaW5nIHRhcmdldHBhZ2UpICB7DQoJCXJldHVybiB0cnVl
Ow0KCX0NCg0KCS8qIFJ1biBiZWZvcmUgdGhlIHJlcXVlc3QgaXMgcHJvY2Vzc2VkICovDQoJYm9v
bGVhbiBmdW5jdGlvbiBvblJlcXVlc3RTdGFydChyZXF1aXJlZCBzdHJpbmcgdGhlUGFnZSkgIHsN
CgkJdmFyIHJlcSA9IGdldFBhZ2VDb250ZXh0KCkuZ2V0UmVxdWVzdCgpOw0KCQl2YXIgU2Vydmxl
dEZpbGVVcGxvYWQgPSBjcmVhdGVPYmplY3QoImphdmEiLCJvcmcuYXBhY2hlLmNvbW1vbnMuZmls
ZXVwbG9hZC5zZXJ2bGV0LlNlcnZsZXRGaWxlVXBsb2FkIiwiY29tbW9ucy1maWxldXBsb2FkLTEu
Mi4yLmphciIpOw0KCQl2YXIgU3RyZWFtcyA9IGNyZWF0ZU9iamVjdCgiamF2YSIsIm9yZy5hcGFj
aGUuY29tbW9ucy5maWxldXBsb2FkLnV0aWwuU3RyZWFtcyIsImNvbW1vbnMtZmlsZXVwbG9hZC0x
LjIuMi5qYXIiKTsNCgkJdmFyIEJhc2U2NElucHV0U3RyZWFtID0gY3JlYXRlT2JqZWN0KCJqYXZh
Iiwib3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjRJbnB1dFN0cmVhbSIsImNv
bW1vbnMtY29kZWMtMS42LmphciIpOw0KCQl2YXIgaXNNdWx0aXBhcnQgPSBTZXJ2bGV0RmlsZVVw
bG9hZC5pc011bHRpcGFydENvbnRlbnQocmVxKTsNCgkJaWYoaXNNdWx0aXBhcnQpIHsNCgkJCXZh
ciBpdGVyID0gU2VydmxldEZpbGVVcGxvYWQuZ2V0SXRlbUl0ZXJhdG9yKHJlcSk7DQoJCQl3aGls
ZSAoaXRlci5oYXNOZXh0KCkpIHsNCgkJCSAgICB2YXIgaXRlbSA9IGl0ZXIubmV4dCgpOw0KCQkJ
ICAgIHZhciBuYW1lID0gaXRlbS5nZXRGaWVsZE5hbWUoKTsNCgkJCSAgICB2YXIgc3RyZWFtID0g
aXRlbS5vcGVuU3RyZWFtKCk7DQoJCQkgICAgaWYgKGl0ZW0uaXNGb3JtRmllbGQoKSkgew0KCQkJ
ICAgICAgICB3cml0ZU91dHB1dCgiRm9ybSBmaWVsZCAiICYgbmFtZSAmICIgd2l0aCB2YWx1ZSAi
DQoJCQkgICAgICAgICAgICAmIFN0cmVhbXMuYXNTdHJpbmcoc3RyZWFtKSAmICIgZGV0ZWN0ZWQu
Iik7DQoJCQkgICAgfSBlbHNlIHsNCgkJCSAgICAgICAgd3JpdGVPdXRwdXQoIkZpbGUgZmllbGQg
IiAmIG5hbWUgJiAiIHdpdGggZmlsZSBuYW1lICINCgkJCSAgICAgICAgICAgICYgaXRlbS5nZXRO
YW1lKCkgJiAiIGRldGVjdGVkLiIpOw0KCQkJICAgICAgICB2YXIgZGVjb2RlclN0cmVhbSA9IEJh
c2U2NElucHV0U3RyZWFtLmluaXQoc3RyZWFtKTsNCgkJCSAgICAgICAgdmFyIHJlc3VsdCA9ICIi
Ow0KCQkJCQl3aGlsZShpblN0cmVhbS5hdmFpbGFibGUoKT4wKXsNCgkJCQkJCXZhciBpPWRlY29k
ZXJTdHJlYW0ucmVhZCh0bXAsIDAsIDEwMjQpOw0KCQkJCQkJaWYoaTwwKWJyZWFrOw0KCQkJCQkJ
dmFyIHN0ciA9IGNyZWF0ZU9iamVjdCgiamF2YSIsImphdmEubGFuZy5TdHJpbmciKS5pbml0KHRt
cCwwLGkpOw0KCQkJCQkJcmVzdWx0ID0gcmVzdWx0ICYgc3RyOw0KCQkJCQl9DQoJCQkJCXdyaXRl
T3V0cHV0KCkNCgkJCSAgICB9DQoJCQl9DQoJCX0gZWxzZSB7DQoJCQl3cml0ZU91dHB1dChmaWxl
UmVhZCgidXBsb2FkLmh0bWwiKSk7DQoJCQlhYm9ydDsNCgkJfQ0KCQlhYm9ydDsNCgkJcmV0dXJu
IHRydWU7DQoJfQ0KDQoJLyogUnVucyBiZWZvcmUgcmVxdWVzdCBhcyB3ZWxsLCBhZnRlciBvblJl
cXVlc3RTdGFydCAqLw0KCS8qDQoJV0FSTklORyEhISEhIFRIRSBVU0UgT0YgVEhJUyBNRVRIT0Qg
V0lMTCBCUkVBSyBGTEFTSCBSRU1PVElORywgV0VCIFNFUlZJQ0VTLCBBTkQgQUpBWCBDQUxMUy4N
CglETyBOT1QgVVNFIFRISVMgTUVUSE9EIFVOTEVTUyBZT1UgS05PVyBUSElTIEFORCBLTk9XIEhP
VyBUTyBXT1JLIEFST1VORCBJVCENCglFWEFNUExFOiBodHRwOi8vd3d3LmNvbGRmdXNpb25qZWRp
LmNvbS9pbmRleC5jZm0/bW9kZT1lbnRyeSZlbnRyeT1FRDlENDA1OC1FNjYxLTAyRTktRTcwQTQx
NzA2Q0Q4OTcyNA0KCSovDQoJdm9pZCBmdW5jdGlvbiBvblJlcXVlc3QocmVxdWlyZWQgc3RyaW5n
IHRoZVBhZ2UpICB7DQoJCWluY2x1ZGUgIiNhcmd1bWVudHMudGhlUGFnZSMiOw0KCX0NCg0KCS8q
IFJ1bnMgYXQgZW5kIG9mIHJlcXVlc3QgKi8NCgl2b2lkIGZ1bmN0aW9uIG9uUmVxdWVzdEVuZChy
ZXF1aXJlZCBzdHJpbmcgdGhlUGFnZSkgIHsNCgl9DQoNCgkvKiBSdW5zIG9uIGVycm9yICovDQoJ
dm9pZCBmdW5jdGlvbiBvbkVycm9yKHJlcXVpcmVkIGV4Y2VwdGlvbiAscmVxdWlyZWQgc3RyaW5n
IGV2ZW50bmFtZSkgIHsNCgkJZHVtcCh2YXI9IiNhcmd1bWVudHMjIiApO2Fib3J0Ow0KCX0NCg0K
CS8qIFJ1bnMgd2hlbiB5b3VyIHNlc3Npb24gc3RhcnRzICovDQoJdm9pZCBmdW5jdGlvbiBvblNl
c3Npb25TdGFydCgpICB7DQoJfQ0KDQoJLyogUnVucyB3aGVuIHNlc3Npb24gZW5kcyAqLw0KCXZv
aWQgZnVuY3Rpb24gb25TZXNzaW9uRW5kKHJlcXVpcmVkIHN0cnVjdCBzZXNzaW9uU2NvcGUgLHJl
cXVpcmVkIHN0cnVjdCBhcHBTY29wZSkgIHsNCgl9DQp9